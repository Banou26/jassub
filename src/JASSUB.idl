[NoDelete]
interface ASS_Style {
    [Owner] attribute DOMString Name;
    [Owner] attribute DOMString FontName;
    attribute double FontSize;
    attribute unsigned long PrimaryColour;
    attribute unsigned long SecondaryColour;
    attribute unsigned long OutlineColour;
    attribute unsigned long BackColour;
    attribute long Bold;
    attribute long Italic;
    attribute long Underline;
    attribute long StrikeOut;
    attribute double ScaleX;
    attribute double ScaleY;
    attribute double Spacing;
    attribute double Angle;
    attribute long BorderStyle;
    attribute double Outline;
    attribute double Shadow;
    attribute long Alignment;
    attribute long MarginL;
    attribute long MarginR;
    attribute long MarginV;
    attribute long Encoding;
    attribute long treat_fontname_as_pattern;
    attribute double Blur;
    attribute long Justify;
};

[NoDelete]
interface ASS_Event {
    attribute long long Start;
    attribute long long Duration;
    attribute long ReadOrder;
    attribute long Layer;
    attribute long Style;
    [Owner] attribute DOMString Name;
    attribute long MarginL;
    attribute long MarginR;
    attribute long MarginV;
    [Owner] attribute DOMString Effect;
    [Owner] attribute DOMString Text;
};

[NoDelete]
interface RenderResult {
    attribute long changed;
    attribute double time;
    attribute long x;
    attribute long y;
    attribute long w;
    attribute long h;
    attribute ByteString image;
    attribute RenderResult next;
};

interface JASSUB {
    void JASSUB();
    void setLogLevel(long level);
    void setDropAnimations(long value);
    void initLibrary(long frame_w, long frame_h, DOMString default_font);
    void createTrackMem(DOMString buf, unsigned long bufsize);
    void removeTrack();
    void resizeCanvas(long frame_w, long frame_h);
    RenderResult renderImage(double time, long force);
    void quitLibrary();
    void reloadLibrary();
    void reloadFonts();
    void setMargin(long top, long bottom, long left, long right);
    long getEventCount();
    long allocEvent();
    long allocStyle();
    void removeEvent(long eid);
    long getStyleCount();
    long getStyleByName([Const] DOMString name);
    void removeStyle(long eid);
    void removeAllEvents();
    void setMemoryLimits(long glyph_limit, long bitmap_cache_limit);
    RenderResult renderBlend(double tm, long force);
};
